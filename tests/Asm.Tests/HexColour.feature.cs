// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Asm.Tests
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class HexColourFeature : object, global::Xunit.IClassFixture<HexColourFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "", "HexColour", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "HexColour.feature"
#line hidden
        
        public HexColourFeature(HexColourFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("HexColour.feature", 96);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Create a HexColor from a string")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Create a HexColor from a string")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("#FF5733", "#FF5733", "0", new string[0])]
        [global::Xunit.InlineDataAttribute("FF5733", "#FF5733", "1", new string[0])]
        [global::Xunit.InlineDataAttribute("#ff5733", "#FF5733", "2", new string[0])]
        [global::Xunit.InlineDataAttribute("ff5733", "#FF5733", "3", new string[0])]
        [global::Xunit.InlineDataAttribute("#FFF", "#FFFFFF", "4", new string[0])]
        [global::Xunit.InlineDataAttribute("FFF", "#FFFFFF", "5", new string[0])]
        [global::Xunit.InlineDataAttribute("#fff", "#FFFFFF", "6", new string[0])]
        [global::Xunit.InlineDataAttribute("fff", "#FFFFFF", "7", new string[0])]
        [global::Xunit.InlineDataAttribute("#123", "#112233", "8", new string[0])]
        [global::Xunit.InlineDataAttribute("123", "#112233", "9", new string[0])]
        [global::Xunit.InlineDataAttribute("#000", "#000000", "10", new string[0])]
        [global::Xunit.InlineDataAttribute("000", "#000000", "11", new string[0])]
        [global::Xunit.InlineDataAttribute("#FFFFFF", "#FFFFFF", "12", new string[0])]
        [global::Xunit.InlineDataAttribute("FFFFFF", "#FFFFFF", "13", new string[0])]
        [global::Xunit.InlineDataAttribute("#ffffff", "#FFFFFF", "14", new string[0])]
        [global::Xunit.InlineDataAttribute("ffffff", "#FFFFFF", "15", new string[0])]
        [global::Xunit.InlineDataAttribute("#000000", "#000000", "16", new string[0])]
        [global::Xunit.InlineDataAttribute("000000", "#000000", "17", new string[0])]
        public async global::System.Threading.Tasks.Task CreateAHexColorFromAString(string hex, string hexValue, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            argumentsOfScenario.Add("HexValue", hexValue);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a HexColor from a string", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 4
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
    await testRunner.WhenAsync("I create a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
    await testRunner.ThenAsync(string.Format("the result should be a HexColour with value \'{0}\'", hexValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Create a HexColor from invalid strings should throw FormatException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Create a HexColor from invalid strings should throw FormatException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("#FF573", "18", new string[0])]
        [global::Xunit.InlineDataAttribute("FF573", "19", new string[0])]
        [global::Xunit.InlineDataAttribute("#FF57333", "20", new string[0])]
        [global::Xunit.InlineDataAttribute("FF57333", "21", new string[0])]
        [global::Xunit.InlineDataAttribute("#ZZZ", "22", new string[0])]
        [global::Xunit.InlineDataAttribute("ZZZ", "23", new string[0])]
        [global::Xunit.InlineDataAttribute("#1234", "24", new string[0])]
        [global::Xunit.InlineDataAttribute("1234", "25", new string[0])]
        public async global::System.Threading.Tasks.Task CreateAHexColorFromInvalidStringsShouldThrowFormatException(string hex, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a HexColor from invalid strings should throw FormatException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 30
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 31
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 32
    await testRunner.WhenAsync("I create a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
    await testRunner.ThenAsync("an exception of type \'System.FormatException\' should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Create a HexColour from a null or empty string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Create a HexColour from a null or empty string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("", "26", new string[0])]
        [global::Xunit.InlineDataAttribute("<NULL>", "27", new string[0])]
        public async global::System.Threading.Tasks.Task CreateAHexColourFromANullOrEmptyStringShouldThrowArgumentException(string hex, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a HexColour from a null or empty string should throw ArgumentException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 47
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 48
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
    await testRunner.WhenAsync("I create a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
    await testRunner.ThenAsync("an exception of type \'System.ArgumentException\' should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Create a HexColour from a whitespace string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Create a HexColour from a whitespace string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task CreateAHexColourFromAWhitespaceStringShouldThrowArgumentException()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "28";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a HexColour from a whitespace string should throw ArgumentException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 58
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 59
    await testRunner.GivenAsync("I have a string \'   \'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 60
    await testRunner.WhenAsync("I create a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 61
    await testRunner.ThenAsync("an exception of type \'System.ArgumentException\' should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Parse a HexColor from a string")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Parse a HexColor from a string")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("#FF5733", "#FF5733", "29", new string[0])]
        [global::Xunit.InlineDataAttribute("FF5733", "#FF5733", "30", new string[0])]
        [global::Xunit.InlineDataAttribute("#ff5733", "#FF5733", "31", new string[0])]
        [global::Xunit.InlineDataAttribute("ff5733", "#FF5733", "32", new string[0])]
        [global::Xunit.InlineDataAttribute("#FFF", "#FFFFFF", "33", new string[0])]
        [global::Xunit.InlineDataAttribute("FFF", "#FFFFFF", "34", new string[0])]
        [global::Xunit.InlineDataAttribute("#fff", "#FFFFFF", "35", new string[0])]
        [global::Xunit.InlineDataAttribute("fff", "#FFFFFF", "36", new string[0])]
        [global::Xunit.InlineDataAttribute("#123", "#112233", "37", new string[0])]
        [global::Xunit.InlineDataAttribute("123", "#112233", "38", new string[0])]
        [global::Xunit.InlineDataAttribute("#000", "#000000", "39", new string[0])]
        [global::Xunit.InlineDataAttribute("000", "#000000", "40", new string[0])]
        [global::Xunit.InlineDataAttribute("#FFFFFF", "#FFFFFF", "41", new string[0])]
        [global::Xunit.InlineDataAttribute("FFFFFF", "#FFFFFF", "42", new string[0])]
        [global::Xunit.InlineDataAttribute("#ffffff", "#FFFFFF", "43", new string[0])]
        [global::Xunit.InlineDataAttribute("ffffff", "#FFFFFF", "44", new string[0])]
        [global::Xunit.InlineDataAttribute("#000000", "#000000", "45", new string[0])]
        [global::Xunit.InlineDataAttribute("000000", "#000000", "46", new string[0])]
        public async global::System.Threading.Tasks.Task ParseAHexColorFromAString(string hex, string hexValue, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            argumentsOfScenario.Add("HexValue", hexValue);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse a HexColor from a string", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 64
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 65
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 66
    await testRunner.WhenAsync("I parse a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.ThenAsync(string.Format("the result should be a HexColour with value \'{0}\'", hexValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Parse a HexColor from invalid strings should throw FormatException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Parse a HexColor from invalid strings should throw FormatException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("#FF573", "47", new string[0])]
        [global::Xunit.InlineDataAttribute("FF573", "48", new string[0])]
        [global::Xunit.InlineDataAttribute("#FF57333", "49", new string[0])]
        [global::Xunit.InlineDataAttribute("FF57333", "50", new string[0])]
        [global::Xunit.InlineDataAttribute("#ZZZ", "51", new string[0])]
        [global::Xunit.InlineDataAttribute("ZZZ", "52", new string[0])]
        [global::Xunit.InlineDataAttribute("#1234", "53", new string[0])]
        [global::Xunit.InlineDataAttribute("1234", "54", new string[0])]
        public async global::System.Threading.Tasks.Task ParseAHexColorFromInvalidStringsShouldThrowFormatException(string hex, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse a HexColor from invalid strings should throw FormatException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 90
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 91
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 92
    await testRunner.WhenAsync("I parse a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 93
    await testRunner.ThenAsync("an exception of type \'System.FormatException\' should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Parse a HexColour from a null or empty string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Parse a HexColour from a null or empty string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("", "55", new string[0])]
        [global::Xunit.InlineDataAttribute("<NULL>", "56", new string[0])]
        public async global::System.Threading.Tasks.Task ParseAHexColourFromANullOrEmptyStringShouldThrowArgumentException(string hex, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse a HexColour from a null or empty string should throw ArgumentException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 107
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 108
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 109
    await testRunner.WhenAsync("I parse a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 110
    await testRunner.ThenAsync("an exception of type \'System.ArgumentException\' should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Parse a HexColour from a whitespace string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Parse a HexColour from a whitespace string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task ParseAHexColourFromAWhitespaceStringShouldThrowArgumentException()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "57";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Parse a HexColour from a whitespace string should throw ArgumentException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 118
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 119
    await testRunner.GivenAsync("I have a string \'   \'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 120
    await testRunner.WhenAsync("I parse a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 121
    await testRunner.ThenAsync("an exception of type \'System.ArgumentException\' should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Try Parse a HexColor from a string")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Try Parse a HexColor from a string")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("#FF5733", "#FF5733", "58", new string[0])]
        [global::Xunit.InlineDataAttribute("FF5733", "#FF5733", "59", new string[0])]
        [global::Xunit.InlineDataAttribute("#ff5733", "#FF5733", "60", new string[0])]
        [global::Xunit.InlineDataAttribute("ff5733", "#FF5733", "61", new string[0])]
        [global::Xunit.InlineDataAttribute("#FFF", "#FFFFFF", "62", new string[0])]
        [global::Xunit.InlineDataAttribute("FFF", "#FFFFFF", "63", new string[0])]
        [global::Xunit.InlineDataAttribute("#fff", "#FFFFFF", "64", new string[0])]
        [global::Xunit.InlineDataAttribute("fff", "#FFFFFF", "65", new string[0])]
        [global::Xunit.InlineDataAttribute("#123", "#112233", "66", new string[0])]
        [global::Xunit.InlineDataAttribute("123", "#112233", "67", new string[0])]
        [global::Xunit.InlineDataAttribute("#000", "#000000", "68", new string[0])]
        [global::Xunit.InlineDataAttribute("000", "#000000", "69", new string[0])]
        [global::Xunit.InlineDataAttribute("#FFFFFF", "#FFFFFF", "70", new string[0])]
        [global::Xunit.InlineDataAttribute("FFFFFF", "#FFFFFF", "71", new string[0])]
        [global::Xunit.InlineDataAttribute("#ffffff", "#FFFFFF", "72", new string[0])]
        [global::Xunit.InlineDataAttribute("ffffff", "#FFFFFF", "73", new string[0])]
        [global::Xunit.InlineDataAttribute("#000000", "#000000", "74", new string[0])]
        [global::Xunit.InlineDataAttribute("000000", "#000000", "75", new string[0])]
        public async global::System.Threading.Tasks.Task TryParseAHexColorFromAString(string hex, string hexValue, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            argumentsOfScenario.Add("HexValue", hexValue);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Try Parse a HexColor from a string", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 124
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 125
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 126
    await testRunner.WhenAsync("I try parse a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 127
    await testRunner.ThenAsync("the boolean value true is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 128
    await testRunner.AndAsync(string.Format("the result should be a HexColour with value \'{0}\'", hexValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Try Parse a HexColor from invalid strings should throw FormatException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Try Parse a HexColor from invalid strings should throw FormatException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("#FF573", "76", new string[0])]
        [global::Xunit.InlineDataAttribute("FF573", "77", new string[0])]
        [global::Xunit.InlineDataAttribute("#FF57333", "78", new string[0])]
        [global::Xunit.InlineDataAttribute("FF57333", "79", new string[0])]
        [global::Xunit.InlineDataAttribute("#ZZZ", "80", new string[0])]
        [global::Xunit.InlineDataAttribute("ZZZ", "81", new string[0])]
        [global::Xunit.InlineDataAttribute("#1234", "82", new string[0])]
        [global::Xunit.InlineDataAttribute("1234", "83", new string[0])]
        public async global::System.Threading.Tasks.Task TryParseAHexColorFromInvalidStringsShouldThrowFormatException(string hex, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Try Parse a HexColor from invalid strings should throw FormatException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 151
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 152
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 153
    await testRunner.WhenAsync("I try parse a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 154
    await testRunner.ThenAsync("the boolean value false is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Try Parse a HexColour from a null or empty string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Try Parse a HexColour from a null or empty string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("", "84", new string[0])]
        [global::Xunit.InlineDataAttribute("<NULL>", "85", new string[0])]
        public async global::System.Threading.Tasks.Task TryParseAHexColourFromANullOrEmptyStringShouldThrowArgumentException(string hex, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Try Parse a HexColour from a null or empty string should throw ArgumentException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 168
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 169
    await testRunner.GivenAsync(string.Format("I have a string \'{0}\'", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 170
    await testRunner.WhenAsync("I try parse a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 171
    await testRunner.ThenAsync("the boolean value false is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Try Parse a HexColour from a whitespace string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Try Parse a HexColour from a whitespace string should throw ArgumentException")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task TryParseAHexColourFromAWhitespaceStringShouldThrowArgumentException()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "86";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Try Parse a HexColour from a whitespace string should throw ArgumentException", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 179
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 180
    await testRunner.GivenAsync("I have a string \'   \'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 181
    await testRunner.WhenAsync("I try parse a new HexColour from the string", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 182
    await testRunner.ThenAsync("the boolean value false is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Create a HexColor from an unsigned integer")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Create a HexColor from an unsigned integer")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("0", "#000000", "87", new string[0])]
        [global::Xunit.InlineDataAttribute("16777215", "#FFFFFF", "88", new string[0])]
        [global::Xunit.InlineDataAttribute("16711680", "#FF0000", "89", new string[0])]
        [global::Xunit.InlineDataAttribute("65280", "#00FF00", "90", new string[0])]
        [global::Xunit.InlineDataAttribute("255", "#0000FF", "91", new string[0])]
        [global::Xunit.InlineDataAttribute("1193046", "#123456", "92", new string[0])]
        public async global::System.Threading.Tasks.Task CreateAHexColorFromAnUnsignedInteger(string hex, string hexValue, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            argumentsOfScenario.Add("HexValue", hexValue);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a HexColor from an unsigned integer", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 186
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 187
    await testRunner.GivenAsync(string.Format("I have a uint {0}", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 188
    await testRunner.WhenAsync("I create a new HexColour from the uint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 189
    await testRunner.ThenAsync(string.Format("the result should be a HexColour with value \'{0}\'", hexValue), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Create a HexColor from an invalid unsigned integer")]
        [global::Xunit.TraitAttribute("FeatureTitle", "HexColour")]
        [global::Xunit.TraitAttribute("Description", "Create a HexColor from an invalid unsigned integer")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("16777216", "93", new string[0])]
        public async global::System.Threading.Tasks.Task CreateAHexColorFromAnInvalidUnsignedInteger(string hex, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Hex", hex);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a HexColor from an invalid unsigned integer", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 200
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 201
    await testRunner.GivenAsync(string.Format("I have a uint {0}", hex), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 202
    await testRunner.WhenAsync("I create a new HexColour from the uint", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 203
    await testRunner.ThenAsync("an exception of type \'System.ArgumentOutOfRangeException\' should be thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await HexColourFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await HexColourFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
