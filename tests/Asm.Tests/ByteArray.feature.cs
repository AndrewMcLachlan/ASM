// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Asm.Tests
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ByteArrayFeature : object, global::Xunit.IClassFixture<ByteArrayFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "", "ByteArray", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ByteArray.feature"
#line hidden
        
        public ByteArrayFeature(ByteArrayFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("ByteArray.feature", 17);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Copy method should return correct sub-array")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "Copy method should return correct sub-array")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task CopyMethodShouldReturnCorrectSub_Array()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Copy method should return correct sub-array", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 4
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync("a ByteArray with values 1, 2, 3, 4, 5 and big endian", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
    await testRunner.WhenAsync("I copy from index 1 with length 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
    await testRunner.ThenAsync("the result should be a ByteArray with values 2, 3, 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="ToCharArray method should convert to char array")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "ToCharArray method should convert to char array")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("big", "65,66,67", "A,B,C", "1", new string[0])]
        [global::Xunit.InlineDataAttribute("little", "65,66,67", "C,B,A", "2", new string[0])]
        public async global::System.Threading.Tasks.Task ToCharArrayMethodShouldConvertToCharArray(string endian, string values, string expected, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Endian", endian);
            argumentsOfScenario.Add("Values", values);
            argumentsOfScenario.Add("Expected", expected);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ToCharArray method should convert to char array", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 10
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 11
    await testRunner.GivenAsync(string.Format("a ByteArray with values {0} and {1} endian", values, endian), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
    await testRunner.WhenAsync("I convert to char array", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 13
    await testRunner.ThenAsync(string.Format("the result should be a char array with values {0}", expected), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="ToUInt16BE method should convert to UInt16")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "ToUInt16BE method should convert to UInt16")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task ToUInt16BEMethodShouldConvertToUInt16()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ToUInt16BE method should convert to UInt16", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 20
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 21
    await testRunner.GivenAsync("a ByteArray with values 1, 2 and big endian", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 22
    await testRunner.WhenAsync("I convert to UInt16", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
    await testRunner.ThenAsync("the ushort result should be 258", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="ToUInt16LE method should convert to UInt16")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "ToUInt16LE method should convert to UInt16")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task ToUInt16LEMethodShouldConvertToUInt16()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ToUInt16LE method should convert to UInt16", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 26
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 27
    await testRunner.GivenAsync("a ByteArray with values 1, 2 and little endian", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
    await testRunner.WhenAsync("I convert to UInt16", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
    await testRunner.ThenAsync("the ushort result should be 513", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="ToUInt32BE method should convert to UInt32")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "ToUInt32BE method should convert to UInt32")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task ToUInt32BEMethodShouldConvertToUInt32()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ToUInt32BE method should convert to UInt32", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 32
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
    await testRunner.GivenAsync("a ByteArray with values 1, 2, 3, 4 and big endian", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
    await testRunner.WhenAsync("I convert to UInt32", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
    await testRunner.ThenAsync("the uint result should be 16909060", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="ToUInt32LE method should convert to UInt32")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "ToUInt32LE method should convert to UInt32")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task ToUInt32LEMethodShouldConvertToUInt32()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "6";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ToUInt32LE method should convert to UInt32", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 38
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 39
    await testRunner.GivenAsync("a ByteArray with values 1, 2, 3, 4 and little endian", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 40
    await testRunner.WhenAsync("I convert to UInt32", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
    await testRunner.ThenAsync("the uint result should be 67305985", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="ToUInt64BE method should convert to UInt64")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "ToUInt64BE method should convert to UInt64")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task ToUInt64BEMethodShouldConvertToUInt64()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "7";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ToUInt64BE method should convert to UInt64", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 44
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 45
    await testRunner.GivenAsync("a ByteArray with values 1, 2, 3, 4, 5, 6, 7, 8 and big endian", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 46
    await testRunner.WhenAsync("I convert to UInt64", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
    await testRunner.ThenAsync("the ulong result should be 72623859790382856", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="ToUInt64LE method should convert to UInt64")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "ToUInt64LE method should convert to UInt64")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task ToUInt64LEMethodShouldConvertToUInt64()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "8";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ToUInt64LE method should convert to UInt64", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 50
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 51
    await testRunner.GivenAsync("a ByteArray with values 1, 2, 3, 4, 5, 6, 7, 8 and little endian", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
    await testRunner.WhenAsync("I convert to UInt64", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
    await testRunner.ThenAsync("the ulong result should be 578437695752307201", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="ToGuid method should convert to Guid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "ToGuid method should convert to Guid")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task ToGuidMethodShouldConvertToGuid()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "9";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ToGuid method should convert to Guid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 56
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 57
    await testRunner.GivenAsync("a ByteArray with values 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 and" +
                        " big endian", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 58
    await testRunner.WhenAsync("I convert to Guid", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 59
    await testRunner.ThenAsync("the GUID result should be \"04030201-0605-0807-090a-0b0c0d0e0f10\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Check equality")]
        [global::Xunit.TraitAttribute("FeatureTitle", "ByteArray")]
        [global::Xunit.TraitAttribute("Description", "Check equality")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("1,2,3,4", "big", "1,2,3,4", "big", "true", "10", new string[0])]
        [global::Xunit.InlineDataAttribute("1,2,3,4", "little", "1,2,3,4", "little", "true", "11", new string[0])]
        [global::Xunit.InlineDataAttribute("1,2,3,4", "big", "1,2,3,4", "little", "false", "12", new string[0])]
        [global::Xunit.InlineDataAttribute("1,2,3,4", "little", "1,2,3,4", "big", "false", "13", new string[0])]
        [global::Xunit.InlineDataAttribute("1,2,3,4", "big", "1,2,3,5", "big", "false", "14", new string[0])]
        public async global::System.Threading.Tasks.Task CheckEquality(string values1, string endian1, string values2, string endian2, string result, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Values 1", values1);
            argumentsOfScenario.Add("Endian 1", endian1);
            argumentsOfScenario.Add("Values 2", values2);
            argumentsOfScenario.Add("Endian 2", endian2);
            argumentsOfScenario.Add("Result", result);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Check equality", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 62
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 63
    await testRunner.GivenAsync(string.Format("a ByteArray with values {0} and {1} endian", values1, endian1), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 64
    await testRunner.AndAsync(string.Format("another ByteArray with values {0} and {1} endian", values2, endian2), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
    await testRunner.WhenAsync("I check for equality", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
    await testRunner.ThenAsync(string.Format("the boolean result should be {0}", result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ByteArrayFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ByteArrayFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
