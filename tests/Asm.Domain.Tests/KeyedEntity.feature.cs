// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Asm.Domain.Tests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class KeyedEntityTestsFeature : object, Xunit.IClassFixture<KeyedEntityTestsFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Keyed Entity tests", "Prove that keyed entity equality works", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "KeyedEntity.feature"
#line hidden
        
        public KeyedEntityTestsFeature(KeyedEntityTestsFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Test equality with .Equals")]
        [Xunit.TraitAttribute("FeatureTitle", "Keyed Entity tests")]
        [Xunit.TraitAttribute("Description", "Test equality with .Equals")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("1", "1", "true", new string[0])]
        [Xunit.InlineDataAttribute("1", "2", "false", new string[0])]
        [Xunit.InlineDataAttribute("1", "<NULL>", "false", new string[0])]
        public async System.Threading.Tasks.Task TestEqualityWith_Equals(string firstID, string secondID, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("First ID", firstID);
            argumentsOfScenario.Add("Second ID", secondID);
            argumentsOfScenario.Add("Result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Test equality with .Equals", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
 await testRunner.GivenAsync(string.Format("I have a keyed entity with ID {0}", firstID), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
 await testRunner.AndAsync(string.Format("I have a second  keyed entity with ID {0}", secondID), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
 await testRunner.WhenAsync("I call first.Equals(second)", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync(string.Format("the boolean value {0} is returned", result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Test equality with ==")]
        [Xunit.TraitAttribute("FeatureTitle", "Keyed Entity tests")]
        [Xunit.TraitAttribute("Description", "Test equality with ==")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("1", "1", "true", new string[0])]
        [Xunit.InlineDataAttribute("1", "2", "false", new string[0])]
        [Xunit.InlineDataAttribute("2", "1", "false", new string[0])]
        [Xunit.InlineDataAttribute("1", "<NULL>", "false", new string[0])]
        [Xunit.InlineDataAttribute("<NULL>", "<NULL>", "true", new string[0])]
        [Xunit.InlineDataAttribute("<NULL>", "1", "false", new string[0])]
        public async System.Threading.Tasks.Task TestEqualityWith(string firstID, string secondID, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("First ID", firstID);
            argumentsOfScenario.Add("Second ID", secondID);
            argumentsOfScenario.Add("Result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Test equality with ==", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 19
 await testRunner.GivenAsync(string.Format("I have a keyed entity with ID {0}", firstID), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 20
 await testRunner.AndAsync(string.Format("I have a second  keyed entity with ID {0}", secondID), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.WhenAsync("I check equality with ==", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
 await testRunner.ThenAsync(string.Format("the boolean value {0} is returned", result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Test inequality with !=")]
        [Xunit.TraitAttribute("FeatureTitle", "Keyed Entity tests")]
        [Xunit.TraitAttribute("Description", "Test inequality with !=")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("1", "1", "false", new string[0])]
        [Xunit.InlineDataAttribute("1", "2", "true", new string[0])]
        [Xunit.InlineDataAttribute("2", "1", "true", new string[0])]
        [Xunit.InlineDataAttribute("1", "<NULL>", "true", new string[0])]
        [Xunit.InlineDataAttribute("<NULL>", "<NULL>", "false", new string[0])]
        [Xunit.InlineDataAttribute("<NULL>", "1", "true", new string[0])]
        public async System.Threading.Tasks.Task TestInequalityWith(string firstID, string secondID, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("First ID", firstID);
            argumentsOfScenario.Add("Second ID", secondID);
            argumentsOfScenario.Add("Result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Test inequality with !=", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 35
 await testRunner.GivenAsync(string.Format("I have a keyed entity with ID {0}", firstID), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
 await testRunner.AndAsync(string.Format("I have a second  keyed entity with ID {0}", secondID), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
 await testRunner.WhenAsync("I check inequality with !=", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
 await testRunner.ThenAsync(string.Format("the boolean value {0} is returned", result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Test equality with the Eqality Comparer")]
        [Xunit.TraitAttribute("FeatureTitle", "Keyed Entity tests")]
        [Xunit.TraitAttribute("Description", "Test equality with the Eqality Comparer")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("1", "1", "true", new string[0])]
        [Xunit.InlineDataAttribute("1", "2", "false", new string[0])]
        [Xunit.InlineDataAttribute("2", "1", "false", new string[0])]
        [Xunit.InlineDataAttribute("1", "<NULL>", "false", new string[0])]
        [Xunit.InlineDataAttribute("<NULL>", "<NULL>", "true", new string[0])]
        [Xunit.InlineDataAttribute("<NULL>", "1", "false", new string[0])]
        public async System.Threading.Tasks.Task TestEqualityWithTheEqalityComparer(string firstID, string secondID, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("First ID", firstID);
            argumentsOfScenario.Add("Second ID", secondID);
            argumentsOfScenario.Add("Result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Test equality with the Eqality Comparer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 51
 await testRunner.GivenAsync(string.Format("I have a keyed entity with ID {0}", firstID), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
 await testRunner.AndAsync(string.Format("I have a second  keyed entity with ID {0}", secondID), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
 await testRunner.WhenAsync("I check equality with an equality comparer", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
 await testRunner.ThenAsync(string.Format("the boolean value {0} is returned", result), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await KeyedEntityTestsFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await KeyedEntityTestsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
