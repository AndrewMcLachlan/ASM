// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Asm.Net.Tests
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::Xunit.TraitAttribute("Category", "IPAddressExtensions")]
    public partial class IPAddressExtensionsFeature : object, global::Xunit.IClassFixture<IPAddressExtensionsFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "IPAddressExtensions"};
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "", "IPAddress Extensions", "    In order to get IP addresses in different notations\r\n    I want to be able to" +
                " convert from a subnet mask to CIDR\r\n    So that I can see IP addresses with CID" +
                "R notation", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "IPAddressExtensions.feature"
#line hidden
        
        public IPAddressExtensionsFeature(IPAddressExtensionsFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("IPAddressExtensions.feature", 42);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Get IP address in CIDR notation")]
        [global::Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [global::Xunit.TraitAttribute("Description", "Get IP address in CIDR notation")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "0.0.0.0", "0.0.0.0/0", "0", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "128.0.0.0", "128.0.0.0/1", "1", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "192.0.0.0", "192.0.0.0/2", "2", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "224.0.0.0", "192.0.0.0/3", "3", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "240.0.0.0", "192.0.0.0/4", "4", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "248.0.0.0", "192.0.0.0/5", "5", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "252.0.0.0", "192.0.0.0/6", "6", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "254.0.0.0", "192.0.0.0/7", "7", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.0.0.0", "192.0.0.0/8", "8", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.128.0.0", "192.128.0.0/9", "9", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.192.0.0", "192.128.0.0/10", "10", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.224.0.0", "192.160.0.0/11", "11", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.240.0.0", "192.160.0.0/12", "12", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.248.0.0", "192.168.0.0/13", "13", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.252.0.0", "192.168.0.0/14", "14", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.254.0.0", "192.168.0.0/15", "15", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.0.0", "192.168.0.0/16", "16", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.128.0", "192.168.0.0/17", "17", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.192.0", "192.168.0.0/18", "18", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.224.0", "192.168.0.0/19", "19", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.240.0", "192.168.0.0/20", "20", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.248.0", "192.168.0.0/21", "21", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.252.0", "192.168.0.0/22", "22", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.254.0", "192.168.0.0/23", "23", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.0", "192.168.1.0/24", "24", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.128", "192.168.1.0/25", "25", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.192", "192.168.1.0/26", "26", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.224", "192.168.1.0/27", "27", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.240", "192.168.1.0/28", "28", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.248", "192.168.1.0/29", "29", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.252", "192.168.1.0/30", "30", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.254", "192.168.1.0/31", "31", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.255", "192.168.1.1/32", "32", new string[0])]
        public async global::System.Threading.Tasks.Task GetIPAddressInCIDRNotation(string iPAddress, string mask, string value, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IP Address", iPAddress);
            argumentsOfScenario.Add("Mask", mask);
            argumentsOfScenario.Add("Value", value);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get IP address in CIDR notation", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 8
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
    await testRunner.GivenAsync(string.Format("I have an IP Address \'{0}\'", iPAddress), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
    await testRunner.AndAsync(string.Format("I have a subnet mask \'{0}\'", mask), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
    await testRunner.WhenAsync("I call ToCidrString", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
    await testRunner.ThenAsync(string.Format("the string value \'{0}\' will be returned", value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Get IP address in CIDR notation with invalid mask")]
        [global::Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [global::Xunit.TraitAttribute("Description", "Get IP address in CIDR notation with invalid mask")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.253", "System.FormatException", "Invalid mask", "33", new string[0])]
        public async global::System.Threading.Tasks.Task GetIPAddressInCIDRNotationWithInvalidMask(string iPAddress, string mask, string exceptionType, string message, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IP Address", iPAddress);
            argumentsOfScenario.Add("Mask", mask);
            argumentsOfScenario.Add("Exception Type", exceptionType);
            argumentsOfScenario.Add("Message", message);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get IP address in CIDR notation with invalid mask", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 51
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
    await testRunner.GivenAsync(string.Format("I have an IP Address \'{0}\'", iPAddress), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
    await testRunner.AndAsync(string.Format("I have a subnet mask \'{0}\'", mask), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
    await testRunner.WhenAsync("I call ToCidrString expecting an exception", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync(string.Format("an exception of type \'{0}\' is thrown", exceptionType), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
    await testRunner.AndAsync(string.Format("the exception message is \'{0}\'", message), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Get IP address in CIDR notation with invalid input")]
        [global::Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [global::Xunit.TraitAttribute("Description", "Get IP address in CIDR notation with invalid input")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("fe80::200:f8ff:fe21:67cf", "255.255.255.255", "ipAddress", "34", new string[0])]
        [global::Xunit.InlineDataAttribute("192.168.0.1", "fe80::200:f8ff:fe21:67cf", "mask", "35", new string[0])]
        public async global::System.Threading.Tasks.Task GetIPAddressInCIDRNotationWithInvalidInput(string iPAddress, string mask, string parameter, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IP Address", iPAddress);
            argumentsOfScenario.Add("Mask", mask);
            argumentsOfScenario.Add("Parameter", parameter);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get IP address in CIDR notation with invalid input", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 63
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 64
    await testRunner.GivenAsync(string.Format("I have an IP Address \'{0}\'", iPAddress), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 65
    await testRunner.AndAsync(string.Format("I have a subnet mask \'{0}\'", mask), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
    await testRunner.WhenAsync("I call ToCidrString expecting an exception", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
    await testRunner.ThenAsync("an exception of type \'System.ArgumentException\' is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 68
    await testRunner.AndAsync(string.Format("the exception message is \'Not an IPv4 address (Parameter \'{0}\')\'", parameter), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
    await testRunner.AndAsync(string.Format("the exception parameter name is \'{0}\'", parameter), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableTheoryAttribute(DisplayName="Get IP address as an unsigned 32 bit integer")]
        [global::Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [global::Xunit.TraitAttribute("Description", "Get IP address as an unsigned 32 bit integer")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        [global::Xunit.InlineDataAttribute("255.255.255.255", "4294967295", "36", new string[0])]
        [global::Xunit.InlineDataAttribute("204.204.204.204", "3435973836", "37", new string[0])]
        public async global::System.Threading.Tasks.Task GetIPAddressAsAnUnsigned32BitInteger(string iPAddress, string value, string @__pickleIndex, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IP Address", iPAddress);
            argumentsOfScenario.Add("Value", value);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get IP address as an unsigned 32 bit integer", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 77
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 78
    await testRunner.GivenAsync(string.Format("I have an IP Address \'{0}\'", iPAddress), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 79
    await testRunner.WhenAsync("I call ToUInt32", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 80
    await testRunner.ThenAsync(string.Format("the unsigned 32 bit integer value {0} will be returned", value), ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Create an IP address from an unsigned 32 bit integer")]
        [global::Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [global::Xunit.TraitAttribute("Description", "Create an IP address from an unsigned 32 bit integer")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task CreateAnIPAddressFromAnUnsigned32BitInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "38";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create an IP address from an unsigned 32 bit integer", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 88
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 89
    await testRunner.GivenAsync("I have an unsigned 32 bit integer 3435973836", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 90
    await testRunner.WhenAsync("I call FromUInt32", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 91
    await testRunner.ThenAsync("the IP Address 204.204.204.204 is returned", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Get IP address as an unsigned 32 bit integer with invalid input")]
        [global::Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [global::Xunit.TraitAttribute("Description", "Get IP address as an unsigned 32 bit integer with invalid input")]
        [global::Xunit.TraitAttribute("Category", "Unit")]
        public async global::System.Threading.Tasks.Task GetIPAddressAsAnUnsigned32BitIntegerWithInvalidInput()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "39";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get IP address as an unsigned 32 bit integer with invalid input", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 94
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 95
    await testRunner.GivenAsync("I have an IP Address \'fe80::200:f8ff:fe21:67cf\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 96
    await testRunner.WhenAsync("I call ToUInt32 expecting an exception", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 97
    await testRunner.ThenAsync("an exception of type \'System.ArgumentException\' is thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 98
    await testRunner.AndAsync("the exception message is \'Not an IPv4 address (Parameter \'ipAddress\')\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 99
    await testRunner.AndAsync("the exception parameter name is \'ipAddress\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await IPAddressExtensionsFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await IPAddressExtensionsFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
