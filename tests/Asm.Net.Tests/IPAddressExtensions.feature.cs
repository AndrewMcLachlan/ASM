// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Asm.Net.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "IPAddressExtensions")]
    public partial class IPAddressExtensionsFeature : object, Xunit.IClassFixture<IPAddressExtensionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "IPAddressExtensions"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "IPAddressExtensions.feature"
#line hidden
        
        public IPAddressExtensionsFeature(IPAddressExtensionsFeature.FixtureData fixtureData, Asm_Net_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "IPAddress Extensions", "    In order to get IP addresses in different notations\r\n    I want to be able to" +
                    " convert from a subnet mask to CIDR\r\n    So that I can see IP addresses with CID" +
                    "R notation", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get IP address in CIDR notation")]
        [Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [Xunit.TraitAttribute("Description", "Get IP address in CIDR notation")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("192.168.1.1", "0.0.0.0", "0.0.0.0/0", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "128.0.0.0", "128.0.0.0/1", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "192.0.0.0", "192.0.0.0/2", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "224.0.0.0", "192.0.0.0/3", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "240.0.0.0", "192.0.0.0/4", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "248.0.0.0", "192.0.0.0/5", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "252.0.0.0", "192.0.0.0/6", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "254.0.0.0", "192.0.0.0/7", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.0.0.0", "192.0.0.0/8", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.128.0.0", "192.128.0.0/9", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.192.0.0", "192.128.0.0/10", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.224.0.0", "192.160.0.0/11", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.240.0.0", "192.160.0.0/12", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.248.0.0", "192.168.0.0/13", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.252.0.0", "192.168.0.0/14", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.254.0.0", "192.168.0.0/15", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.0.0", "192.168.0.0/16", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.128.0", "192.168.0.0/17", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.192.0", "192.168.0.0/18", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.224.0", "192.168.0.0/19", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.240.0", "192.168.0.0/20", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.248.0", "192.168.0.0/21", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.252.0", "192.168.0.0/22", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.254.0", "192.168.0.0/23", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.0", "192.168.1.0/24", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.128", "192.168.1.0/25", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.192", "192.168.1.0/26", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.224", "192.168.1.0/27", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.240", "192.168.1.0/28", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.248", "192.168.1.0/29", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.252", "192.168.1.0/30", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.254", "192.168.1.0/31", new string[0])]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.255", "192.168.1.1/32", new string[0])]
        public void GetIPAddressInCIDRNotation(string iPAddress, string mask, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IP Address", iPAddress);
            argumentsOfScenario.Add("Mask", mask);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get IP address in CIDR notation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
    testRunner.Given(string.Format("I have an IP Address \'{0}\'", iPAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
    testRunner.And(string.Format("I have a subnet mask \'{0}\'", mask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.When("I call ToCidrString", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
    testRunner.Then(string.Format("the string value \'{0}\' will be returned", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get IP address in CIDR notation with invalid mask")]
        [Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [Xunit.TraitAttribute("Description", "Get IP address in CIDR notation with invalid mask")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("192.168.1.1", "255.255.255.253", "System.FormatException", "Invalid mask", new string[0])]
        public void GetIPAddressInCIDRNotationWithInvalidMask(string iPAddress, string mask, string exceptionType, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IP Address", iPAddress);
            argumentsOfScenario.Add("Mask", mask);
            argumentsOfScenario.Add("Exception Type", exceptionType);
            argumentsOfScenario.Add("Message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get IP address in CIDR notation with invalid mask", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
    testRunner.Given(string.Format("I have an IP Address \'{0}\'", iPAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
    testRunner.And(string.Format("I have a subnet mask \'{0}\'", mask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
    testRunner.When("I call ToCidrString expecting an exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then(string.Format("an exception of type \'{0}\' is thrown", exceptionType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
    testRunner.And(string.Format("the exception message is \'{0}\'", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get IP address in CIDR notation with invalid input")]
        [Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [Xunit.TraitAttribute("Description", "Get IP address in CIDR notation with invalid input")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("fe80::200:f8ff:fe21:67cf", "255.255.255.255", "ipAddress", new string[0])]
        [Xunit.InlineDataAttribute("192.168.0.1", "fe80::200:f8ff:fe21:67cf", "mask", new string[0])]
        public void GetIPAddressInCIDRNotationWithInvalidInput(string iPAddress, string mask, string parameter, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IP Address", iPAddress);
            argumentsOfScenario.Add("Mask", mask);
            argumentsOfScenario.Add("Parameter", parameter);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get IP address in CIDR notation with invalid input", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
    testRunner.Given(string.Format("I have an IP Address \'{0}\'", iPAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
    testRunner.And(string.Format("I have a subnet mask \'{0}\'", mask), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
    testRunner.When("I call ToCidrString expecting an exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
    testRunner.Then("an exception of type \'System.ArgumentException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
    testRunner.And(string.Format("the exception message is \'Not an IPv4 address (Parameter \'{0}\')\'", parameter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    testRunner.And(string.Format("the exception parameter name is \'{0}\'", parameter), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get IP address as an unsigned 32 bit integer")]
        [Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [Xunit.TraitAttribute("Description", "Get IP address as an unsigned 32 bit integer")]
        [Xunit.TraitAttribute("Category", "Unit")]
        [Xunit.InlineDataAttribute("255.255.255.255", "4294967295", new string[0])]
        [Xunit.InlineDataAttribute("204.204.204.204", "3435973836", new string[0])]
        public void GetIPAddressAsAnUnsigned32BitInteger(string iPAddress, string value, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Unit"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("IP Address", iPAddress);
            argumentsOfScenario.Add("Value", value);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get IP address as an unsigned 32 bit integer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
    testRunner.Given(string.Format("I have an IP Address \'{0}\'", iPAddress), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
    testRunner.When("I call ToUInt32", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
    testRunner.Then(string.Format("the unsigned 32 bit integer value {0} will be returned", value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create an IP address from an unsigned 32 bit integer")]
        [Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [Xunit.TraitAttribute("Description", "Create an IP address from an unsigned 32 bit integer")]
        [Xunit.TraitAttribute("Category", "Unit")]
        public void CreateAnIPAddressFromAnUnsigned32BitInteger()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create an IP address from an unsigned 32 bit integer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
    testRunner.Given("I have an unsigned 32 bit integer 3435973836", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
    testRunner.When("I call FromUInt32", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
    testRunner.Then("the IP Address 204.204.204.204 is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get IP address as an unsigned 32 bit integer with invalid input")]
        [Xunit.TraitAttribute("FeatureTitle", "IPAddress Extensions")]
        [Xunit.TraitAttribute("Description", "Get IP address as an unsigned 32 bit integer with invalid input")]
        [Xunit.TraitAttribute("Category", "Unit")]
        public void GetIPAddressAsAnUnsigned32BitIntegerWithInvalidInput()
        {
            string[] tagsOfScenario = new string[] {
                    "Unit"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get IP address as an unsigned 32 bit integer with invalid input", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 95
    testRunner.Given("I have an IP Address \'fe80::200:f8ff:fe21:67cf\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
    testRunner.When("I call ToUInt32 expecting an exception", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
    testRunner.Then("an exception of type \'System.ArgumentException\' is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
    testRunner.And("the exception message is \'Not an IPv4 address (Parameter \'ipAddress\')\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
    testRunner.And("the exception parameter name is \'ipAddress\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IPAddressExtensionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IPAddressExtensionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
